using System;
using GObject;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Rsvg.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY


public abstract class LengthHandle : SafeHandle
{    
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected LengthHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }

    public double GetLength()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<LengthData>(handle).Length;
}
public void SetLength(double value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<LengthData>(handle);
    data.Length = value;
    Marshal.StructureToPtr(data, handle, false);
}

public Rsvg.Unit GetUnit()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<LengthData>(handle).Unit;
}
public void SetUnit(Rsvg.Unit value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<LengthData>(handle);
    data.Unit = value;
    Marshal.StructureToPtr(data, handle, false);
}


    public bool Equals(LengthHandle? other)
    {
        if (ReferenceEquals(null, other))
            return false;

        if (ReferenceEquals(this, other))
            return true;

        return handle.Equals(other.handle);
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is LengthHandle other && Equals(other);
    }

    public override int GetHashCode()
    {
        return handle.GetHashCode();
    }
}

public class LengthUnownedHandle : LengthHandle
{
    private static LengthUnownedHandle? nullHandle;
    public static LengthUnownedHandle NullHandle => nullHandle ??= new LengthUnownedHandle();

    /// <summary>
    /// Creates a new instance of LengthUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal LengthUnownedHandle() : base(false) { }

    /// <summary>
    /// Creates a new instance of LengthOwnedHandle. Assumes that the given pointer is unowned by the runtime.
    /// </summary>
    public LengthUnownedHandle(IntPtr ptr) : base(false)
    {
        SetHandle(ptr);
    }

    public LengthOwnedHandle Copy()
    {
        var size = Marshal.SizeOf<LengthData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new LengthOwnedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class LengthOwnedHandle : LengthHandle
{
    /// <summary>
    /// Creates a new instance of LengthOwnedHandle. Used automatically by PInvoke.
    /// </summary>
    internal LengthOwnedHandle() : base(true) { }

    /// <summary>
    /// Creates a new instance of LengthOwnedHandle. Assumes that the given pointer is owned by the runtime.
    /// </summary>
    public LengthOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    /// <summary>
    /// Creates a new owned Handle
    /// </summary>
    public static LengthOwnedHandle Create()
    {
        var size = Marshal.SizeOf<LengthData>();
        var ptr = GLib.Functions.Malloc((nuint)size);
       
        var str = new LengthData();
        Marshal.StructureToPtr(str, ptr, false);
            
        return new LengthOwnedHandle(ptr);
    }

    public unsafe void CopyTo(IntPtr ptr)
    {
        var data = Marshal.PtrToStructure<LengthData>(handle);
        Marshal.StructureToPtr(data, ptr, false);
    }

    public LengthUnownedHandle UnownedCopy()
    {
        var size = Marshal.SizeOf<LengthData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new LengthUnownedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        GLib.Functions.Free(handle);
        return true;
    }
}

public abstract class LengthArrayHandle : SafeHandle
{
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected LengthArrayHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }
}

public class LengthArrayUnownedHandle : LengthArrayHandle
{
    private static LengthArrayUnownedHandle? nullHandle;
    public static LengthArrayUnownedHandle NullHandle => nullHandle ??= new LengthArrayUnownedHandle();
    
    private int length;

    /// <summary>
    /// Creates a new instance of LengthArrayUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal LengthArrayUnownedHandle() : base(false) { }
    
    public LengthArrayUnownedHandle(IntPtr ptr, int length) : base(false)
    {
        this.length = length;
        SetHandle(ptr);
    }

    public Rsvg.Length[] ToArray(int length)
    {
        return ToNullableArray(length) ?? throw new InvalidOperationException("Handle is invalid");
    }

    public Rsvg.Length[]? ToNullableArray(int length)
    {
        if (IsInvalid)
            return null;
        
        var data = new Rsvg.Length[length];
        var currentHandle = handle;
        for(int i = 0; i < length; i++)
        {
            var ownedHandle = new Rsvg.Internal.LengthUnownedHandle(currentHandle).Copy();
            data[i] = new Rsvg.Length(ownedHandle);
            currentHandle += Marshal.SizeOf<Rsvg.Internal.LengthData>();
        }

        return data;
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class LengthArrayOwnedHandle : LengthArrayHandle
{
    
    //This has no constructor without parameters as we can't supply a length to an array via pinvoke.
    //The length would need to be set manually and the instance be freed via glib.

    private LengthArrayOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    public static LengthArrayOwnedHandle Create(Rsvg.Length[] data)
    {
        var size = Marshal.SizeOf<Rsvg.Internal.LengthData>();
        var ptr = Marshal.AllocHGlobal(size * data.Length);
        var current = ptr;
        for (int i = 0; i < data.Length; i++)
        {
            var structure = Marshal.PtrToStructure<Rsvg.Internal.LengthData>(data[i].Handle.DangerousGetHandle());
            Marshal.StructureToPtr(structure, current, false);
            current += size;
        }
        
        return new LengthArrayOwnedHandle(ptr);
    }
    
    protected override bool ReleaseHandle()
    {
        Marshal.FreeHGlobal(handle);
        return true;
    }
}