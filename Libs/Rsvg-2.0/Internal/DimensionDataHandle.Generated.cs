using System;
using GObject;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Rsvg.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY


public abstract class DimensionDataHandle : SafeHandle
{    
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected DimensionDataHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }

    public int GetWidth()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<DimensionDataData>(handle).Width;
}
public void SetWidth(int value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<DimensionDataData>(handle);
    data.Width = value;
    Marshal.StructureToPtr(data, handle, false);
}

public int GetHeight()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<DimensionDataData>(handle).Height;
}
public void SetHeight(int value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<DimensionDataData>(handle);
    data.Height = value;
    Marshal.StructureToPtr(data, handle, false);
}

public double GetEm()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<DimensionDataData>(handle).Em;
}
public void SetEm(double value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<DimensionDataData>(handle);
    data.Em = value;
    Marshal.StructureToPtr(data, handle, false);
}

public double GetEx()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<DimensionDataData>(handle).Ex;
}
public void SetEx(double value)
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    var data = Marshal.PtrToStructure<DimensionDataData>(handle);
    data.Ex = value;
    Marshal.StructureToPtr(data, handle, false);
}


    public bool Equals(DimensionDataHandle? other)
    {
        if (ReferenceEquals(null, other))
            return false;

        if (ReferenceEquals(this, other))
            return true;

        return handle.Equals(other.handle);
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is DimensionDataHandle other && Equals(other);
    }

    public override int GetHashCode()
    {
        return handle.GetHashCode();
    }
}

public class DimensionDataUnownedHandle : DimensionDataHandle
{
    private static DimensionDataUnownedHandle? nullHandle;
    public static DimensionDataUnownedHandle NullHandle => nullHandle ??= new DimensionDataUnownedHandle();

    /// <summary>
    /// Creates a new instance of DimensionDataUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal DimensionDataUnownedHandle() : base(false) { }

    /// <summary>
    /// Creates a new instance of DimensionDataOwnedHandle. Assumes that the given pointer is unowned by the runtime.
    /// </summary>
    public DimensionDataUnownedHandle(IntPtr ptr) : base(false)
    {
        SetHandle(ptr);
    }

    public DimensionDataOwnedHandle Copy()
    {
        var size = Marshal.SizeOf<DimensionDataData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new DimensionDataOwnedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class DimensionDataOwnedHandle : DimensionDataHandle
{
    /// <summary>
    /// Creates a new instance of DimensionDataOwnedHandle. Used automatically by PInvoke.
    /// </summary>
    internal DimensionDataOwnedHandle() : base(true) { }

    /// <summary>
    /// Creates a new instance of DimensionDataOwnedHandle. Assumes that the given pointer is owned by the runtime.
    /// </summary>
    public DimensionDataOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    /// <summary>
    /// Creates a new owned Handle
    /// </summary>
    public static DimensionDataOwnedHandle Create()
    {
        var size = Marshal.SizeOf<DimensionDataData>();
        var ptr = GLib.Functions.Malloc((nuint)size);
       
        var str = new DimensionDataData();
        Marshal.StructureToPtr(str, ptr, false);
            
        return new DimensionDataOwnedHandle(ptr);
    }

    public unsafe void CopyTo(IntPtr ptr)
    {
        var data = Marshal.PtrToStructure<DimensionDataData>(handle);
        Marshal.StructureToPtr(data, ptr, false);
    }

    public DimensionDataUnownedHandle UnownedCopy()
    {
        var size = Marshal.SizeOf<DimensionDataData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new DimensionDataUnownedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        GLib.Functions.Free(handle);
        return true;
    }
}

public abstract class DimensionDataArrayHandle : SafeHandle
{
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected DimensionDataArrayHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }
}

public class DimensionDataArrayUnownedHandle : DimensionDataArrayHandle
{
    private static DimensionDataArrayUnownedHandle? nullHandle;
    public static DimensionDataArrayUnownedHandle NullHandle => nullHandle ??= new DimensionDataArrayUnownedHandle();
    
    private int length;

    /// <summary>
    /// Creates a new instance of DimensionDataArrayUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal DimensionDataArrayUnownedHandle() : base(false) { }
    
    public DimensionDataArrayUnownedHandle(IntPtr ptr, int length) : base(false)
    {
        this.length = length;
        SetHandle(ptr);
    }

    public Rsvg.DimensionData[] ToArray(int length)
    {
        return ToNullableArray(length) ?? throw new InvalidOperationException("Handle is invalid");
    }

    public Rsvg.DimensionData[]? ToNullableArray(int length)
    {
        if (IsInvalid)
            return null;
        
        var data = new Rsvg.DimensionData[length];
        var currentHandle = handle;
        for(int i = 0; i < length; i++)
        {
            var ownedHandle = new Rsvg.Internal.DimensionDataUnownedHandle(currentHandle).Copy();
            data[i] = new Rsvg.DimensionData(ownedHandle);
            currentHandle += Marshal.SizeOf<Rsvg.Internal.DimensionDataData>();
        }

        return data;
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class DimensionDataArrayOwnedHandle : DimensionDataArrayHandle
{
    
    //This has no constructor without parameters as we can't supply a length to an array via pinvoke.
    //The length would need to be set manually and the instance be freed via glib.

    private DimensionDataArrayOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    public static DimensionDataArrayOwnedHandle Create(Rsvg.DimensionData[] data)
    {
        var size = Marshal.SizeOf<Rsvg.Internal.DimensionDataData>();
        var ptr = Marshal.AllocHGlobal(size * data.Length);
        var current = ptr;
        for (int i = 0; i < data.Length; i++)
        {
            var structure = Marshal.PtrToStructure<Rsvg.Internal.DimensionDataData>(data[i].Handle.DangerousGetHandle());
            Marshal.StructureToPtr(structure, current, false);
            current += size;
        }
        
        return new DimensionDataArrayOwnedHandle(ptr);
    }
    
    protected override bool ReleaseHandle()
    {
        Marshal.FreeHGlobal(handle);
        return true;
    }
}