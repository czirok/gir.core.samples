
using System;
using GObject;
using System.Runtime.InteropServices;
#nullable enable
namespace Rsvg
{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class Handle
    {
        public static readonly Property<string?, Handle> BaseUriPropertyDefinition = new (
    unmanagedName: "base-uri",
    managedName: nameof(BaseUri)
);

public string? BaseUri
{
    get => BaseUriPropertyDefinition.Get(this);
    set => BaseUriPropertyDefinition.Set(this, value);
}


public static readonly Property<string?, Handle> DescPropertyDefinition = new (
    unmanagedName: "desc",
    managedName: nameof(Desc)
);

public string? Desc
{
    get => DescPropertyDefinition.Get(this);
}


public static readonly Property<double, Handle> DpiXPropertyDefinition = new (
    unmanagedName: "dpi-x",
    managedName: nameof(DpiX)
);

public double DpiX
{
    get => DpiXPropertyDefinition.Get(this);
    set => DpiXPropertyDefinition.Set(this, value);
}


public static readonly Property<double, Handle> DpiYPropertyDefinition = new (
    unmanagedName: "dpi-y",
    managedName: nameof(DpiY)
);

public double DpiY
{
    get => DpiYPropertyDefinition.Get(this);
    set => DpiYPropertyDefinition.Set(this, value);
}


public static readonly Property<double, Handle> EmPropertyDefinition = new (
    unmanagedName: "em",
    managedName: nameof(Em)
);

public double Em
{
    get => EmPropertyDefinition.Get(this);
}


public static readonly Property<double, Handle> ExPropertyDefinition = new (
    unmanagedName: "ex",
    managedName: nameof(Ex)
);

public double Ex
{
    get => ExPropertyDefinition.Get(this);
}


public static readonly Property<Rsvg.HandleFlags, Handle> FlagsPropertyDefinition = new (
    unmanagedName: "flags",
    managedName: nameof(Flags)
);

public Rsvg.HandleFlags Flags
{
    get => FlagsPropertyDefinition.Get(this);
}


public static readonly Property<int, Handle> HeightPropertyDefinition = new (
    unmanagedName: "height",
    managedName: nameof(Height)
);

public int Height
{
    get => HeightPropertyDefinition.Get(this);
}


public static readonly Property<string?, Handle> MetadataPropertyDefinition = new (
    unmanagedName: "metadata",
    managedName: nameof(Metadata)
);

public string? Metadata
{
    get => MetadataPropertyDefinition.Get(this);
}


public static readonly Property<string?, Handle> TitlePropertyDefinition = new (
    unmanagedName: "title",
    managedName: nameof(Title)
);

public string? Title
{
    get => TitlePropertyDefinition.Get(this);
}


public static readonly Property<int, Handle> WidthPropertyDefinition = new (
    unmanagedName: "width",
    managedName: nameof(Width)
);

public int Width
{
    get => WidthPropertyDefinition.Get(this);
}


    }
}