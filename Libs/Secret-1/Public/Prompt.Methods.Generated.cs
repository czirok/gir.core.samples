
using System;
using System.Linq;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace Secret;

// AUTOGENERATED FILE - DO NOT MODIFY

public partial class Prompt
{
    


public GLib.Variant PerformFinish(Gio.AsyncResult result)
{
    
    var resultPerformFinish = Secret.Internal.Prompt.PerformFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.Variant(resultPerformFinish);
}


public GLib.Variant PerformSync(string? windowId, Gio.Cancellable? cancellable, GLib.VariantType returnType)
{
    using var windowIdNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(windowId);
    var resultPerformSync = Secret.Internal.Prompt.PerformSync(base.Handle.DangerousGetHandle(), windowIdNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, returnType.Handle, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.Variant(resultPerformSync);
}


public GLib.Variant Run(string? windowId, Gio.Cancellable? cancellable, GLib.VariantType returnType)
{
    using var windowIdNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(windowId);
    var resultRun = Secret.Internal.Prompt.Run(base.Handle.DangerousGetHandle(), windowIdNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, returnType.Handle, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.Variant(resultRun);
}
}