
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Secret;

// AUTOGENERATED FILE - DO NOT MODIFY


public sealed partial class Value : GLib.BoxedRecord, GObject.GTypeProvider, GObject.InstanceFactory, IEquatable<Value>, IDisposable
{
    public Secret.Internal.ValueOwnedHandle Handle { get; }

    public Value(Secret.Internal.ValueOwnedHandle handle)
    {
        Handle = handle;
        Handle.SetMemoryPressure();
    }

    static object GObject.InstanceFactory.Create(IntPtr handle, bool ownsHandle)
    {
        var safeHandle = ownsHandle
            ? new Secret.Internal.ValueOwnedHandle(handle)
            : Secret.Internal.ValueOwnedHandle.FromUnowned(handle);

        return new Value(safeHandle);
    }

    

public static Value New(string secret, nint length, string contentType)
{
    using var secretNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(secret);
using var contentTypeNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(contentType);
    var valueHandle = Internal.Value.New(secretNative, length, contentTypeNative);
return new Value(valueHandle);

}


    public static GObject.Type GetGType()
    {
        return Secret.Internal.Value.GetGType();
    }

    

    


public string GetContentType()
{
    
    var resultGetContentType = Secret.Internal.Value.GetContentType(this.Handle);

    
    
    return resultGetContentType.ConvertToString();
}


public string? GetText()
{
    
    var resultGetText = Secret.Internal.Value.GetText(this.Handle);

    
    
    return resultGetText.ConvertToString();
}


public Secret.Value Ref()
{
    
    var resultRef = Secret.Internal.Value.Ref(this.Handle);

    
    
    return new Secret.Value(resultRef);
}


public void Unref()
{
    
    Secret.Internal.Value.Unref(this.Handle);

    
    
    
}

[Version("0.19.0")]
public string UnrefToPassword(ref nuint length)
{
    
    var resultUnrefToPassword = Secret.Internal.Value.UnrefToPassword(this.Handle, ref length);

    
    
    return resultUnrefToPassword.ConvertToString();
}

    System.IntPtr GLib.BoxedRecord.GetHandle()
    {
        return Handle.DangerousGetHandle();
    }

    public bool Equals(Value? other)
    {
        if (ReferenceEquals(null, other))
            return false;

        if (ReferenceEquals(this, other))
            return true;

        return Handle.Equals(other.Handle);
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is Value other && Equals(other);
    }

    public override int GetHashCode()
    {
        return Handle.GetHashCode();
    }

    partial void OnDispose();

    public void Dispose()
    {
        OnDispose();
        Handle.Dispose();
    }
}