
using System;
using System.Linq;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace Secret;

// AUTOGENERATED FILE - DO NOT MODIFY

public partial class Service : GObject.GTypeProvider, GObject.InstanceFactory
{

    public static new GObject.Type GetGType()
    {
        return Secret.Internal.Service.GetGType();
    }

    static object GObject.InstanceFactory.Create(IntPtr handle, bool ownsHandle)
    {
        return CreateIntern(handle, ownsHandle);
    }

    private static Service CreateIntern(IntPtr handle, bool ownsHandle)
    {
        return new Service(new Secret.Internal.ServiceHandle(handle, ownsHandle));
    }

    

public static void Disconnect()
{
    
    Secret.Internal.Service.Disconnect();

    
    
    
}



public static Secret.Service GetFinish(Gio.AsyncResult result)
{
    
    var resultGetFinish = Secret.Internal.Service.GetFinish(((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return (Secret.Service) GObject.Internal.InstanceWrapper.WrapHandle<Secret.Service>(resultGetFinish, true);
}


public static Secret.Service GetSync(Secret.ServiceFlags flags, Gio.Cancellable? cancellable)
{
    
    var resultGetSync = Secret.Internal.Service.GetSync(flags, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return (Secret.Service) GObject.Internal.InstanceWrapper.WrapHandle<Secret.Service>(resultGetSync, true);
}



public static Secret.Service OpenFinish(Gio.AsyncResult result)
{
    
    var resultOpenFinish = Secret.Internal.Service.OpenFinish(((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return (Secret.Service) GObject.Internal.InstanceWrapper.WrapHandle<Secret.Service>(resultOpenFinish, true);
}


public static Secret.Service OpenSync(GObject.Type serviceGtype, string? serviceBusName, Secret.ServiceFlags flags, Gio.Cancellable? cancellable)
{
    using var serviceBusNameNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(serviceBusName);
    var resultOpenSync = Secret.Internal.Service.OpenSync(serviceGtype, serviceBusNameNative, flags, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return (Secret.Service) GObject.Internal.InstanceWrapper.WrapHandle<Secret.Service>(resultOpenSync, true);
}
}