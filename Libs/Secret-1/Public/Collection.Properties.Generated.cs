
using System;
using GObject;
using System.Runtime.InteropServices;
#nullable enable
namespace Secret
{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class Collection
    {
        public static readonly Property<ulong, Collection> CreatedPropertyDefinition = new (
    unmanagedName: "created",
    managedName: nameof(Created)
);

public ulong Created
{
    get => Secret.Internal.Collection.GetCreated(base.Handle.DangerousGetHandle());
    set => CreatedPropertyDefinition.Set(this, value);
}


public static readonly Property<Secret.CollectionFlags, Collection> FlagsPropertyDefinition = new (
    unmanagedName: "flags",
    managedName: nameof(Flags)
);

public Secret.CollectionFlags Flags
{
    get => Secret.Internal.Collection.GetFlags(base.Handle.DangerousGetHandle());
}



public static readonly Property<string?, Collection> LabelPropertyDefinition = new (
    unmanagedName: "label",
    managedName: nameof(Label)
);

public string? Label
{
    get => LabelPropertyDefinition.Get(this);
    set => LabelPropertyDefinition.Set(this, value);
}


public static readonly Property<bool, Collection> LockedPropertyDefinition = new (
    unmanagedName: "locked",
    managedName: nameof(Locked)
);

public bool Locked
{
    get => Secret.Internal.Collection.GetLocked(base.Handle.DangerousGetHandle());
}


public static readonly Property<ulong, Collection> ModifiedPropertyDefinition = new (
    unmanagedName: "modified",
    managedName: nameof(Modified)
);

public ulong Modified
{
    get => Secret.Internal.Collection.GetModified(base.Handle.DangerousGetHandle());
    set => ModifiedPropertyDefinition.Set(this, value);
}


public static readonly Property<Secret.Service?, Collection> ServicePropertyDefinition = new (
    unmanagedName: "service",
    managedName: nameof(Service)
);

public Secret.Service? Service
{
    get => ServicePropertyDefinition.Get(this);
}


    }
}