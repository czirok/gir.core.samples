
using System;
using System.Linq;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace Secret;

// AUTOGENERATED FILE - DO NOT MODIFY

public partial class Item
{
    


public bool DeleteFinish(Gio.AsyncResult result)
{
    
    var resultDeleteFinish = Secret.Internal.Item.DeleteFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultDeleteFinish;
}


public bool DeleteSync(Gio.Cancellable? cancellable)
{
    
    var resultDeleteSync = Secret.Internal.Item.DeleteSync(base.Handle.DangerousGetHandle(), cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultDeleteSync;
}


public GLib.HashTable GetAttributes()
{
    
    var resultGetAttributes = Secret.Internal.Item.GetAttributes(base.Handle.DangerousGetHandle());

    
    
    return new GLib.HashTable(resultGetAttributes);
}


public ulong GetCreated()
{
    
    var resultGetCreated = Secret.Internal.Item.GetCreated(base.Handle.DangerousGetHandle());

    
    
    return resultGetCreated;
}


public new Secret.ItemFlags GetFlags()
{
    
    var resultGetFlags = Secret.Internal.Item.GetFlags(base.Handle.DangerousGetHandle());

    
    
    return resultGetFlags;
}


public string GetLabel()
{
    
    var resultGetLabel = Secret.Internal.Item.GetLabel(base.Handle.DangerousGetHandle());

    
    
    return resultGetLabel.ConvertToString();
}


public bool GetLocked()
{
    
    var resultGetLocked = Secret.Internal.Item.GetLocked(base.Handle.DangerousGetHandle());

    
    
    return resultGetLocked;
}


public ulong GetModified()
{
    
    var resultGetModified = Secret.Internal.Item.GetModified(base.Handle.DangerousGetHandle());

    
    
    return resultGetModified;
}


public string? GetSchemaName()
{
    
    var resultGetSchemaName = Secret.Internal.Item.GetSchemaName(base.Handle.DangerousGetHandle());

    
    
    return resultGetSchemaName.ConvertToString();
}


public Secret.Value? GetSecret()
{
    
    var resultGetSecret = Secret.Internal.Item.GetSecret(base.Handle.DangerousGetHandle());

    
    
    return resultGetSecret.IsInvalid ? null : new Secret.Value(resultGetSecret);
}


public Secret.Service GetService()
{
    
    var resultGetService = Secret.Internal.Item.GetService(base.Handle.DangerousGetHandle());

    
    
    return (Secret.Service) GObject.Internal.InstanceWrapper.WrapHandle<Secret.Service>(resultGetService, false);
}



public bool LoadSecretFinish(Gio.AsyncResult result)
{
    
    var resultLoadSecretFinish = Secret.Internal.Item.LoadSecretFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultLoadSecretFinish;
}


public bool LoadSecretSync(Gio.Cancellable? cancellable)
{
    
    var resultLoadSecretSync = Secret.Internal.Item.LoadSecretSync(base.Handle.DangerousGetHandle(), cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultLoadSecretSync;
}


public void Refresh()
{
    
    Secret.Internal.Item.Refresh(base.Handle.DangerousGetHandle());

    
    
    
}



public bool SetAttributesFinish(Gio.AsyncResult result)
{
    
    var resultSetAttributesFinish = Secret.Internal.Item.SetAttributesFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAttributesFinish;
}


public bool SetAttributesSync(Secret.Schema? schema, GLib.HashTable attributes, Gio.Cancellable? cancellable)
{
    
    var resultSetAttributesSync = Secret.Internal.Item.SetAttributesSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAttributesSync;
}



public bool SetLabelFinish(Gio.AsyncResult result)
{
    
    var resultSetLabelFinish = Secret.Internal.Item.SetLabelFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetLabelFinish;
}


public bool SetLabelSync(string label, Gio.Cancellable? cancellable)
{
    using var labelNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(label);
    var resultSetLabelSync = Secret.Internal.Item.SetLabelSync(base.Handle.DangerousGetHandle(), labelNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetLabelSync;
}



public bool SetSecretFinish(Gio.AsyncResult result)
{
    
    var resultSetSecretFinish = Secret.Internal.Item.SetSecretFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetSecretFinish;
}


public bool SetSecretSync(Secret.Value value, Gio.Cancellable? cancellable)
{
    
    var resultSetSecretSync = Secret.Internal.Item.SetSecretSync(base.Handle.DangerousGetHandle(), value.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetSecretSync;
}
}