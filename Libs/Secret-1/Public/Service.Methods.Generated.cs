
using System;
using System.Linq;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace Secret;

// AUTOGENERATED FILE - DO NOT MODIFY

public partial class Service
{
    


public bool ClearFinish(Gio.AsyncResult result)
{
    
    var resultClearFinish = Secret.Internal.Service.ClearFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultClearFinish;
}


public bool ClearSync(Secret.Schema? schema, GLib.HashTable attributes, Gio.Cancellable? cancellable)
{
    
    var resultClearSync = Secret.Internal.Service.ClearSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultClearSync;
}



public string CreateCollectionDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultCreateCollectionDbusPathFinish = Secret.Internal.Service.CreateCollectionDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultCreateCollectionDbusPathFinish.ConvertToString();
}


public string CreateCollectionDbusPathSync(GLib.HashTable properties, string? alias, Secret.CollectionCreateFlags flags, Gio.Cancellable? cancellable)
{
    using var aliasNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(alias);
    var resultCreateCollectionDbusPathSync = Secret.Internal.Service.CreateCollectionDbusPathSync(base.Handle.DangerousGetHandle(), properties.Handle, aliasNative, flags, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultCreateCollectionDbusPathSync.ConvertToString();
}



public string CreateItemDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultCreateItemDbusPathFinish = Secret.Internal.Service.CreateItemDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultCreateItemDbusPathFinish.ConvertToString();
}


public string CreateItemDbusPathSync(string collectionPath, GLib.HashTable properties, Secret.Value value, Secret.ItemCreateFlags flags, Gio.Cancellable? cancellable)
{
    using var collectionPathNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(collectionPath);
    var resultCreateItemDbusPathSync = Secret.Internal.Service.CreateItemDbusPathSync(base.Handle.DangerousGetHandle(), collectionPathNative, properties.Handle, value.Handle, flags, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultCreateItemDbusPathSync.ConvertToString();
}


public Secret.Value DecodeDbusSecret(GLib.Variant value)
{
    
    var resultDecodeDbusSecret = Secret.Internal.Service.DecodeDbusSecret(base.Handle.DangerousGetHandle(), value.Handle);

    
    
    return new Secret.Value(resultDecodeDbusSecret);
}



public bool DeleteItemDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultDeleteItemDbusPathFinish = Secret.Internal.Service.DeleteItemDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultDeleteItemDbusPathFinish;
}


public bool DeleteItemDbusPathSync(string itemPath, Gio.Cancellable? cancellable)
{
    using var itemPathNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(itemPath);
    var resultDeleteItemDbusPathSync = Secret.Internal.Service.DeleteItemDbusPathSync(base.Handle.DangerousGetHandle(), itemPathNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultDeleteItemDbusPathSync;
}


public GLib.Variant EncodeDbusSecret(Secret.Value value)
{
    
    var resultEncodeDbusSecret = Secret.Internal.Service.EncodeDbusSecret(base.Handle.DangerousGetHandle(), value.Handle);

    
    
    return new GLib.Variant(resultEncodeDbusSecret.OwnedCopy());
}



public bool EnsureSessionFinish(Gio.AsyncResult result)
{
    
    var resultEnsureSessionFinish = Secret.Internal.Service.EnsureSessionFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultEnsureSessionFinish;
}


public bool EnsureSessionSync(Gio.Cancellable? cancellable)
{
    
    var resultEnsureSessionSync = Secret.Internal.Service.EnsureSessionSync(base.Handle.DangerousGetHandle(), cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultEnsureSessionSync;
}


public GObject.Type GetCollectionGtype()
{
    
    var resultGetCollectionGtype = Secret.Internal.Service.GetCollectionGtype(base.Handle.DangerousGetHandle());

    
    
    return resultGetCollectionGtype;
}


public GLib.List? GetCollections()
{
    
    var resultGetCollections = Secret.Internal.Service.GetCollections(base.Handle.DangerousGetHandle());

    
    
    return resultGetCollections.IsInvalid ? null : new GLib.List(resultGetCollections);
}


public new Secret.ServiceFlags GetFlags()
{
    
    var resultGetFlags = Secret.Internal.Service.GetFlags(base.Handle.DangerousGetHandle());

    
    
    return resultGetFlags;
}


public GObject.Type GetItemGtype()
{
    
    var resultGetItemGtype = Secret.Internal.Service.GetItemGtype(base.Handle.DangerousGetHandle());

    
    
    return resultGetItemGtype;
}



public Secret.Value? GetSecretForDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultGetSecretForDbusPathFinish = Secret.Internal.Service.GetSecretForDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultGetSecretForDbusPathFinish.IsInvalid ? null : new Secret.Value(resultGetSecretForDbusPathFinish);
}


public Secret.Value? GetSecretForDbusPathSync(string itemPath, Gio.Cancellable? cancellable)
{
    using var itemPathNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(itemPath);
    var resultGetSecretForDbusPathSync = Secret.Internal.Service.GetSecretForDbusPathSync(base.Handle.DangerousGetHandle(), itemPathNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultGetSecretForDbusPathSync.IsInvalid ? null : new Secret.Value(resultGetSecretForDbusPathSync);
}



public GLib.HashTable GetSecretsForDbusPathsFinish(Gio.AsyncResult result)
{
    
    var resultGetSecretsForDbusPathsFinish = Secret.Internal.Service.GetSecretsForDbusPathsFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.HashTable(resultGetSecretsForDbusPathsFinish);
}


public GLib.HashTable GetSecretsForDbusPathsSync(string itemPaths, Gio.Cancellable? cancellable)
{
    using var itemPathsNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(itemPaths);
    var resultGetSecretsForDbusPathsSync = Secret.Internal.Service.GetSecretsForDbusPathsSync(base.Handle.DangerousGetHandle(), itemPathsNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.HashTable(resultGetSecretsForDbusPathsSync);
}


public string? GetSessionAlgorithms()
{
    
    var resultGetSessionAlgorithms = Secret.Internal.Service.GetSessionAlgorithms(base.Handle.DangerousGetHandle());

    
    
    return resultGetSessionAlgorithms.ConvertToString();
}


public string? GetSessionDbusPath()
{
    
    var resultGetSessionDbusPath = Secret.Internal.Service.GetSessionDbusPath(base.Handle.DangerousGetHandle());

    
    
    return resultGetSessionDbusPath.ConvertToString();
}



public bool LoadCollectionsFinish(Gio.AsyncResult result)
{
    
    var resultLoadCollectionsFinish = Secret.Internal.Service.LoadCollectionsFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultLoadCollectionsFinish;
}


public bool LoadCollectionsSync(Gio.Cancellable? cancellable)
{
    
    var resultLoadCollectionsSync = Secret.Internal.Service.LoadCollectionsSync(base.Handle.DangerousGetHandle(), cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultLoadCollectionsSync;
}




public int LockDbusPathsFinish(Gio.AsyncResult result, out string[]? locked)
{
    
    var resultLockDbusPathsFinish = Secret.Internal.Service.LockDbusPathsFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out var lockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    locked = lockedNative.ConvertToStringArray();
    
    return resultLockDbusPathsFinish;
}


public int LockDbusPathsSync(string[] paths, Gio.Cancellable? cancellable, out string[]? locked)
{
    GLib.Internal.Utf8StringArrayNullTerminatedHandle pathsNative = GLib.Internal.Utf8StringArrayNullTerminatedOwnedHandle.Create(paths);
    var resultLockDbusPathsSync = Secret.Internal.Service.LockDbusPathsSync(base.Handle.DangerousGetHandle(), pathsNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out var lockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    locked = lockedNative.ConvertToStringArray();
    
    return resultLockDbusPathsSync;
}





public Secret.Value LookupFinish(Gio.AsyncResult result)
{
    
    var resultLookupFinish = Secret.Internal.Service.LookupFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new Secret.Value(resultLookupFinish);
}


public Secret.Value LookupSync(Secret.Schema? schema, GLib.HashTable attributes, Gio.Cancellable? cancellable)
{
    
    var resultLookupSync = Secret.Internal.Service.LookupSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new Secret.Value(resultLookupSync);
}




public GLib.Variant? PromptAtDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultPromptAtDbusPathFinish = Secret.Internal.Service.PromptAtDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultPromptAtDbusPathFinish.IsInvalid ? null : new GLib.Variant(resultPromptAtDbusPathFinish);
}


public GLib.Variant? PromptAtDbusPathSync(string promptPath, Gio.Cancellable? cancellable, GLib.VariantType? returnType)
{
    using var promptPathNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(promptPath);
    var resultPromptAtDbusPathSync = Secret.Internal.Service.PromptAtDbusPathSync(base.Handle.DangerousGetHandle(), promptPathNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, (GLib.Internal.VariantTypeHandle?) returnType?.Handle ?? GLib.Internal.VariantTypeUnownedHandle.NullHandle, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultPromptAtDbusPathSync.IsInvalid ? null : new GLib.Variant(resultPromptAtDbusPathSync);
}


public GLib.Variant PromptFinish(Gio.AsyncResult result)
{
    
    var resultPromptFinish = Secret.Internal.Service.PromptFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.Variant(resultPromptFinish);
}


public GLib.Variant PromptSync(Secret.Prompt prompt, Gio.Cancellable? cancellable, GLib.VariantType returnType)
{
    
    var resultPromptSync = Secret.Internal.Service.PromptSync(base.Handle.DangerousGetHandle(), prompt.Handle.DangerousGetHandle(), cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, returnType.Handle, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.Variant(resultPromptSync);
}



public string? ReadAliasDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultReadAliasDbusPathFinish = Secret.Internal.Service.ReadAliasDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultReadAliasDbusPathFinish.ConvertToString();
}


public string? ReadAliasDbusPathSync(string alias, Gio.Cancellable? cancellable)
{
    using var aliasNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(alias);
    var resultReadAliasDbusPathSync = Secret.Internal.Service.ReadAliasDbusPathSync(base.Handle.DangerousGetHandle(), aliasNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultReadAliasDbusPathSync.ConvertToString();
}



public GLib.List SearchFinish(Gio.AsyncResult result)
{
    
    var resultSearchFinish = Secret.Internal.Service.SearchFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.List(resultSearchFinish);
}



public bool SearchForDbusPathsFinish(Gio.AsyncResult result, out string[]? unlocked, out string[]? locked)
{
    
    var resultSearchForDbusPathsFinish = Secret.Internal.Service.SearchForDbusPathsFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out var unlockedNative, out var lockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    unlocked = unlockedNative.ConvertToStringArray();
locked = lockedNative.ConvertToStringArray();
    
    return resultSearchForDbusPathsFinish;
}


public bool SearchForDbusPathsSync(Secret.Schema? schema, GLib.HashTable attributes, Gio.Cancellable? cancellable, out string[]? unlocked, out string[]? locked)
{
    
    var resultSearchForDbusPathsSync = Secret.Internal.Service.SearchForDbusPathsSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out var unlockedNative, out var lockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    unlocked = unlockedNative.ConvertToStringArray();
locked = lockedNative.ConvertToStringArray();
    
    return resultSearchForDbusPathsSync;
}


public GLib.List SearchSync(Secret.Schema? schema, GLib.HashTable attributes, Secret.SearchFlags flags, Gio.Cancellable? cancellable)
{
    
    var resultSearchSync = Secret.Internal.Service.SearchSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, flags, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return new GLib.List(resultSearchSync);
}



public bool SetAliasFinish(Gio.AsyncResult result)
{
    
    var resultSetAliasFinish = Secret.Internal.Service.SetAliasFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAliasFinish;
}


public bool SetAliasSync(string alias, Secret.Collection? collection, Gio.Cancellable? cancellable)
{
    using var aliasNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(alias);
    var resultSetAliasSync = Secret.Internal.Service.SetAliasSync(base.Handle.DangerousGetHandle(), aliasNative, collection?.Handle.DangerousGetHandle() ?? IntPtr.Zero, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAliasSync;
}



public bool SetAliasToDbusPathFinish(Gio.AsyncResult result)
{
    
    var resultSetAliasToDbusPathFinish = Secret.Internal.Service.SetAliasToDbusPathFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAliasToDbusPathFinish;
}


public bool SetAliasToDbusPathSync(string alias, string? collectionPath, Gio.Cancellable? cancellable)
{
    using var aliasNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(alias);
using var collectionPathNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(collectionPath);
    var resultSetAliasToDbusPathSync = Secret.Internal.Service.SetAliasToDbusPathSync(base.Handle.DangerousGetHandle(), aliasNative, collectionPathNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultSetAliasToDbusPathSync;
}



public bool StoreFinish(Gio.AsyncResult result)
{
    
    var resultStoreFinish = Secret.Internal.Service.StoreFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultStoreFinish;
}


public bool StoreSync(Secret.Schema? schema, GLib.HashTable attributes, string? collection, string label, Secret.Value value, Gio.Cancellable? cancellable)
{
    using var collectionNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(collection);
using var labelNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(label);
    var resultStoreSync = Secret.Internal.Service.StoreSync(base.Handle.DangerousGetHandle(), (Secret.Internal.SchemaHandle?) schema?.Handle ?? Secret.Internal.SchemaUnownedHandle.NullHandle, attributes.Handle, collectionNative, labelNative, value.Handle, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultStoreSync;
}




public int UnlockDbusPathsFinish(Gio.AsyncResult result, out string[]? unlocked)
{
    
    var resultUnlockDbusPathsFinish = Secret.Internal.Service.UnlockDbusPathsFinish(base.Handle.DangerousGetHandle(), ((GObject.Object)result).Handle.DangerousGetHandle(), out var unlockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    unlocked = unlockedNative.ConvertToStringArray();
    
    return resultUnlockDbusPathsFinish;
}


public int UnlockDbusPathsSync(string[] paths, Gio.Cancellable? cancellable, out string[]? unlocked)
{
    GLib.Internal.Utf8StringArrayNullTerminatedHandle pathsNative = GLib.Internal.Utf8StringArrayNullTerminatedOwnedHandle.Create(paths);
    var resultUnlockDbusPathsSync = Secret.Internal.Service.UnlockDbusPathsSync(base.Handle.DangerousGetHandle(), pathsNative, cancellable?.Handle.DangerousGetHandle() ?? IntPtr.Zero, out var unlockedNative, out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    unlocked = unlockedNative.ConvertToStringArray();
    
    return resultUnlockDbusPathsSync;
}


}