using System;
using GObject;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Secret.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY


public abstract class ItemClassHandle : SafeHandle
{    
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected ItemClassHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }

    public Gio.Internal.DBusProxyClassData GetParentClass()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<ItemClassData>(handle).ParentClass;
}



    public bool Equals(ItemClassHandle? other)
    {
        if (ReferenceEquals(null, other))
            return false;

        if (ReferenceEquals(this, other))
            return true;

        return handle.Equals(other.handle);
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is ItemClassHandle other && Equals(other);
    }

    public override int GetHashCode()
    {
        return handle.GetHashCode();
    }
}

public class ItemClassUnownedHandle : ItemClassHandle
{
    private static ItemClassUnownedHandle? nullHandle;
    public static ItemClassUnownedHandle NullHandle => nullHandle ??= new ItemClassUnownedHandle();

    /// <summary>
    /// Creates a new instance of ItemClassUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal ItemClassUnownedHandle() : base(false) { }

    /// <summary>
    /// Creates a new instance of ItemClassOwnedHandle. Assumes that the given pointer is unowned by the runtime.
    /// </summary>
    public ItemClassUnownedHandle(IntPtr ptr) : base(false)
    {
        SetHandle(ptr);
    }

    public ItemClassOwnedHandle Copy()
    {
        var size = Marshal.SizeOf<ItemClassData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new ItemClassOwnedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class ItemClassOwnedHandle : ItemClassHandle
{
    /// <summary>
    /// Creates a new instance of ItemClassOwnedHandle. Used automatically by PInvoke.
    /// </summary>
    internal ItemClassOwnedHandle() : base(true) { }

    /// <summary>
    /// Creates a new instance of ItemClassOwnedHandle. Assumes that the given pointer is owned by the runtime.
    /// </summary>
    public ItemClassOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    /// <summary>
    /// Creates a new owned Handle
    /// </summary>
    public static ItemClassOwnedHandle Create()
    {
        var size = Marshal.SizeOf<ItemClassData>();
        var ptr = GLib.Functions.Malloc((nuint)size);
       
        var str = new ItemClassData();
        Marshal.StructureToPtr(str, ptr, false);
            
        return new ItemClassOwnedHandle(ptr);
    }

    public unsafe void CopyTo(IntPtr ptr)
    {
        var data = Marshal.PtrToStructure<ItemClassData>(handle);
        Marshal.StructureToPtr(data, ptr, false);
    }

    public ItemClassUnownedHandle UnownedCopy()
    {
        var size = Marshal.SizeOf<ItemClassData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new ItemClassUnownedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        GLib.Functions.Free(handle);
        return true;
    }
}

public abstract class ItemClassArrayHandle : SafeHandle
{
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected ItemClassArrayHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }
}

public class ItemClassArrayUnownedHandle : ItemClassArrayHandle
{
    private static ItemClassArrayUnownedHandle? nullHandle;
    public static ItemClassArrayUnownedHandle NullHandle => nullHandle ??= new ItemClassArrayUnownedHandle();
    
    private int length;

    /// <summary>
    /// Creates a new instance of ItemClassArrayUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal ItemClassArrayUnownedHandle() : base(false) { }
    
    public ItemClassArrayUnownedHandle(IntPtr ptr, int length) : base(false)
    {
        this.length = length;
        SetHandle(ptr);
    }

    public Secret.ItemClass[] ToArray(int length)
    {
        return ToNullableArray(length) ?? throw new InvalidOperationException("Handle is invalid");
    }

    public Secret.ItemClass[]? ToNullableArray(int length)
    {
        if (IsInvalid)
            return null;
        
        var data = new Secret.ItemClass[length];
        var currentHandle = handle;
        for(int i = 0; i < length; i++)
        {
            var ownedHandle = new Secret.Internal.ItemClassUnownedHandle(currentHandle).Copy();
            data[i] = new Secret.ItemClass(ownedHandle);
            currentHandle += Marshal.SizeOf<Secret.Internal.ItemClassData>();
        }

        return data;
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class ItemClassArrayOwnedHandle : ItemClassArrayHandle
{
    
    //This has no constructor without parameters as we can't supply a length to an array via pinvoke.
    //The length would need to be set manually and the instance be freed via glib.

    private ItemClassArrayOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    public static ItemClassArrayOwnedHandle Create(Secret.ItemClass[] data)
    {
        var size = Marshal.SizeOf<Secret.Internal.ItemClassData>();
        var ptr = Marshal.AllocHGlobal(size * data.Length);
        var current = ptr;
        for (int i = 0; i < data.Length; i++)
        {
            var structure = Marshal.PtrToStructure<Secret.Internal.ItemClassData>(data[i].Handle.DangerousGetHandle());
            Marshal.StructureToPtr(structure, current, false);
            current += size;
        }
        
        return new ItemClassArrayOwnedHandle(ptr);
    }
    
    protected override bool ReleaseHandle()
    {
        Marshal.FreeHGlobal(handle);
        return true;
    }
}