
using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using GObject;
using GObject.Internal;

namespace Secret.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY

internal class TypeRegistration
{
    internal static void RegisterTypes()
    {
        Register<Secret.Collection>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.Item>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.Prompt>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.Service>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);

        Register<Secret.BackendHelper>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.RetrievableHelper>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);

        Register<Secret.Schema>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.SchemaAttribute>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);
Register<Secret.Value>(OSPlatform.Linux, OSPlatform.OSX, OSPlatform.Windows);

        
    }

    private static void Register<T>(params OSPlatform[] supportedPlatforms) where T : InstanceFactory, GTypeProvider
    {
         try
         {
            if(supportedPlatforms.Any(RuntimeInformation.IsOSPlatform))
                GObject.Internal.DynamicInstanceFactory.Register(T.GetGType(), T.Create);
         }
         catch(System.Exception e)
         {
             Debug.WriteLine($"Could not register type: {e.Message}");
         }
     }
}