
using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Notify07.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY

/// <summary>
/// Async Handler for ActionCallback. An async annotation indicates the closure will
/// be called precisely once, after which it is then available for garbage collection.
/// </summary>

public class ActionCallbackAsyncHandler
{
    private Notify07.ActionCallback managedCallback;
    private GCHandle gch;

    public Notify07.Internal.ActionCallback NativeCallback;

    public ActionCallbackAsyncHandler(Notify07.ActionCallback managed)
    {
        managedCallback = managed;
        gch = GCHandle.Alloc(this);
        
NativeCallback = (IntPtr notification, GLib.Internal.NonNullableUtf8StringHandle action, IntPtr userData) => {
    var notificationNative = (Notify07.Notification) GObject.Internal.InstanceWrapper.WrapHandle<Notify07.Notification>(notification, false);
var actionNative = action.ConvertToString();

    managedCallback(notificationNative, actionNative);

    
    gch.Free();
    
};
    }
}