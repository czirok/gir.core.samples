using System;
using GObject;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace Notify07.Internal;

// AUTOGENERATED FILE - DO NOT MODIFY


public abstract class NotificationClassHandle : SafeHandle
{    
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected NotificationClassHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }

    public GObject.Internal.ObjectClassData GetParentClass()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<NotificationClassData>(handle).ParentClass;
}

public NotificationClassData.ClosedCallback GetClosed()
{
    if (IsClosed || IsInvalid)
        throw new InvalidOperationException("Handle is closed or invalid");

    return Marshal.PtrToStructure<NotificationClassData>(handle).Closed;
}


    public bool Equals(NotificationClassHandle? other)
    {
        if (ReferenceEquals(null, other))
            return false;

        if (ReferenceEquals(this, other))
            return true;

        return handle.Equals(other.handle);
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is NotificationClassHandle other && Equals(other);
    }

    public override int GetHashCode()
    {
        return handle.GetHashCode();
    }
}

public class NotificationClassUnownedHandle : NotificationClassHandle
{
    private static NotificationClassUnownedHandle? nullHandle;
    public static NotificationClassUnownedHandle NullHandle => nullHandle ??= new NotificationClassUnownedHandle();

    /// <summary>
    /// Creates a new instance of NotificationClassUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal NotificationClassUnownedHandle() : base(false) { }

    /// <summary>
    /// Creates a new instance of NotificationClassOwnedHandle. Assumes that the given pointer is unowned by the runtime.
    /// </summary>
    public NotificationClassUnownedHandle(IntPtr ptr) : base(false)
    {
        SetHandle(ptr);
    }

    public NotificationClassOwnedHandle Copy()
    {
        var size = Marshal.SizeOf<NotificationClassData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new NotificationClassOwnedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class NotificationClassOwnedHandle : NotificationClassHandle
{
    /// <summary>
    /// Creates a new instance of NotificationClassOwnedHandle. Used automatically by PInvoke.
    /// </summary>
    internal NotificationClassOwnedHandle() : base(true) { }

    /// <summary>
    /// Creates a new instance of NotificationClassOwnedHandle. Assumes that the given pointer is owned by the runtime.
    /// </summary>
    public NotificationClassOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    /// <summary>
    /// Creates a new owned Handle
    /// </summary>
    public static NotificationClassOwnedHandle Create()
    {
        var size = Marshal.SizeOf<NotificationClassData>();
        var ptr = GLib.Functions.Malloc((nuint)size);
       
        var str = new NotificationClassData();
        Marshal.StructureToPtr(str, ptr, false);
            
        return new NotificationClassOwnedHandle(ptr);
    }

    public unsafe void CopyTo(IntPtr ptr)
    {
        var data = Marshal.PtrToStructure<NotificationClassData>(handle);
        Marshal.StructureToPtr(data, ptr, false);
    }

    public NotificationClassUnownedHandle UnownedCopy()
    {
        var size = Marshal.SizeOf<NotificationClassData>();
        var ptr = GLib.Functions.Memdup2(handle,(nuint) size);
            
        return new NotificationClassUnownedHandle(ptr);
    }

    protected override bool ReleaseHandle()
    {
        GLib.Functions.Free(handle);
        return true;
    }
}

public abstract class NotificationClassArrayHandle : SafeHandle
{
    public sealed override bool IsInvalid => handle == IntPtr.Zero;

    protected NotificationClassArrayHandle(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { }
}

public class NotificationClassArrayUnownedHandle : NotificationClassArrayHandle
{
    private static NotificationClassArrayUnownedHandle? nullHandle;
    public static NotificationClassArrayUnownedHandle NullHandle => nullHandle ??= new NotificationClassArrayUnownedHandle();
    
    private int length;

    /// <summary>
    /// Creates a new instance of NotificationClassArrayUnownedHandle. Used automatically by PInvoke.
    /// </summary>
    internal NotificationClassArrayUnownedHandle() : base(false) { }
    
    public NotificationClassArrayUnownedHandle(IntPtr ptr, int length) : base(false)
    {
        this.length = length;
        SetHandle(ptr);
    }

    public Notify07.NotificationClass[] ToArray(int length)
    {
        return ToNullableArray(length) ?? throw new InvalidOperationException("Handle is invalid");
    }

    public Notify07.NotificationClass[]? ToNullableArray(int length)
    {
        if (IsInvalid)
            return null;
        
        var data = new Notify07.NotificationClass[length];
        var currentHandle = handle;
        for(int i = 0; i < length; i++)
        {
            var ownedHandle = new Notify07.Internal.NotificationClassUnownedHandle(currentHandle).Copy();
            data[i] = new Notify07.NotificationClass(ownedHandle);
            currentHandle += Marshal.SizeOf<Notify07.Internal.NotificationClassData>();
        }

        return data;
    }

    protected override bool ReleaseHandle()
    {
        throw new System.Exception("UnownedHandle must not be freed");
    }
}

public class NotificationClassArrayOwnedHandle : NotificationClassArrayHandle
{
    
    //This has no constructor without parameters as we can't supply a length to an array via pinvoke.
    //The length would need to be set manually and the instance be freed via glib.

    private NotificationClassArrayOwnedHandle(IntPtr ptr) : base(true)
    {
        SetHandle(ptr);
    }

    public static NotificationClassArrayOwnedHandle Create(Notify07.NotificationClass[] data)
    {
        var size = Marshal.SizeOf<Notify07.Internal.NotificationClassData>();
        var ptr = Marshal.AllocHGlobal(size * data.Length);
        var current = ptr;
        for (int i = 0; i < data.Length; i++)
        {
            var structure = Marshal.PtrToStructure<Notify07.Internal.NotificationClassData>(data[i].Handle.DangerousGetHandle());
            Marshal.StructureToPtr(structure, current, false);
            current += size;
        }
        
        return new NotificationClassArrayOwnedHandle(ptr);
    }
    
    protected override bool ReleaseHandle()
    {
        Marshal.FreeHGlobal(handle);
        return true;
    }
}