
using System;
using System.Linq;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace Notify07;

// AUTOGENERATED FILE - DO NOT MODIFY

public partial class Notification
{
    


public void ClearActions()
{
    
    Notify07.Internal.Notification.ClearActions(base.Handle.DangerousGetHandle());

    
    
    
}


public void ClearHints()
{
    
    Notify07.Internal.Notification.ClearHints(base.Handle.DangerousGetHandle());

    
    
    
}


public bool Close()
{
    
    var resultClose = Notify07.Internal.Notification.Close(base.Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultClose;
}

[Version("0.7.10")]
public string? GetActivationToken()
{
    
    var resultGetActivationToken = Notify07.Internal.Notification.GetActivationToken(base.Handle.DangerousGetHandle());

    
    
    return resultGetActivationToken.ConvertToString();
}


public int GetClosedReason()
{
    
    var resultGetClosedReason = Notify07.Internal.Notification.GetClosedReason(base.Handle.DangerousGetHandle());

    
    
    return resultGetClosedReason;
}

[Version("0.8.4")]
public void SetAppIcon(string? appIcon)
{
    using var appIconNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(appIcon);
    Notify07.Internal.Notification.SetAppIcon(base.Handle.DangerousGetHandle(), appIconNative);

    
    
    
}

[Version("0.7.3")]
public void SetAppName(string? appName)
{
    using var appNameNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(appName);
    Notify07.Internal.Notification.SetAppName(base.Handle.DangerousGetHandle(), appNameNative);

    
    
    
}


public void SetCategory(string category)
{
    using var categoryNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(category);
    Notify07.Internal.Notification.SetCategory(base.Handle.DangerousGetHandle(), categoryNative);

    
    
    
}

[Version("0.6")]
public void SetHint(string key, GLib.Variant? value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHint(base.Handle.DangerousGetHandle(), keyNative, (GLib.Internal.VariantHandle?) value?.Handle ?? GLib.Internal.VariantUnownedHandle.NullHandle);

    
    
    
}


public void SetHintByte(string key, byte value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHintByte(base.Handle.DangerousGetHandle(), keyNative, value);

    
    
    
}


public void SetHintByteArray(string key, Span<byte> value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHintByteArray(base.Handle.DangerousGetHandle(), keyNative, ref MemoryMarshal.GetReference(value), (nuint) value.Length);

    
    
    
}


public void SetHintDouble(string key, double value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHintDouble(base.Handle.DangerousGetHandle(), keyNative, value);

    
    
    
}


public void SetHintInt32(string key, int value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHintInt32(base.Handle.DangerousGetHandle(), keyNative, value);

    
    
    
}


public void SetHintString(string key, string value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
using var valueNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(value);
    Notify07.Internal.Notification.SetHintString(base.Handle.DangerousGetHandle(), keyNative, valueNative);

    
    
    
}


public void SetHintUint32(string key, uint value)
{
    using var keyNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(key);
    Notify07.Internal.Notification.SetHintUint32(base.Handle.DangerousGetHandle(), keyNative, value);

    
    
    
}


public void SetIconFromPixbuf(GdkPixbuf.Pixbuf icon)
{
    
    Notify07.Internal.Notification.SetIconFromPixbuf(base.Handle.DangerousGetHandle(), icon.Handle.DangerousGetHandle());

    
    
    
}

[Version("0.5")]
public void SetImageFromPixbuf(GdkPixbuf.Pixbuf pixbuf)
{
    
    Notify07.Internal.Notification.SetImageFromPixbuf(base.Handle.DangerousGetHandle(), pixbuf.Handle.DangerousGetHandle());

    
    
    
}


public void SetTimeout(int timeout)
{
    
    Notify07.Internal.Notification.SetTimeout(base.Handle.DangerousGetHandle(), timeout);

    
    
    
}


public void SetUrgency(Notify07.Urgency urgency)
{
    
    Notify07.Internal.Notification.SetUrgency(base.Handle.DangerousGetHandle(), urgency);

    
    
    
}


public bool Show()
{
    
    var resultShow = Notify07.Internal.Notification.Show(base.Handle.DangerousGetHandle(), out GLib.Internal.ErrorOwnedHandle error);
if(!error.IsInvalid)
    throw new GLib.GException(error);
    
    
    return resultShow;
}


public bool Update(string summary, string? body, string? icon)
{
    using var summaryNative = GLib.Internal.NonNullableUtf8StringOwnedHandle.Create(summary);
using var bodyNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(body);
using var iconNative = GLib.Internal.NullableUtf8StringOwnedHandle.Create(icon);
    var resultUpdate = Notify07.Internal.Notification.Update(base.Handle.DangerousGetHandle(), summaryNative, bodyNative, iconNative);

    
    
    return resultUpdate;
}
}